# -*- coding: utf-8 -*-
"""NLP_Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15Fpb7UXCTfwccjRRKkLwO9JH31LqMJ_4
"""

import pandas as pd
import torch
from sklearn.model_selection import train_test_split
from transformers import AutoTokenizer, AutoModelForSequenceClassification, Trainer, TrainingArguments
from sklearn.metrics import accuracy_score, precision_recall_fscore_support

# Define preprocessing functions
def getwordid(word):
    with open("vocab.txt", "r", encoding='utf-8') as f:
        mystring = f.read()
    liststring = mystring.split()
    c = 0
    for x in liststring:
        if word == x:
            break
        c = c + 1
    return c

def isstopword(word):
    with open("stopwords.txt", "r", encoding='utf-8') as f:
        mystring = f.read()
    liststring = mystring.split()
    return word in liststring

def convertstringtotoken(input):
    retvalue = []
    sen = input.split()
    for x in sen:
        if not isstopword(x):
            retvalue.append(getwordid(x))
    return retvalue

def getlabel(input):
    labels = {
        "پرسش": 1, "ترس": 2, "تعجب": 3, "خنثی": 4,
        "خنده": 5, "خوشحالی": 6, "عصبانیت": 7, "غم": 8
    }
    return labels.get(input, 0)

# Load and preprocess your dataset
dataset_path = "dataset.tsv"  # Replace with your dataset path
data = pd.read_csv(dataset_path, delimiter="\t", header=None, names=["label", "text"])

# Preprocess text data
data['tokens'] = data['text'].apply(convertstringtotoken)
data['label'] = data['label'].apply(getlabel)

# Split the data into training and test sets
train_data, test_data = train_test_split(data, test_size=0.2, random_state=42, stratify=data['label'])

# Load ParsBERT tokenizer
model_name = "HooshvareLab/bert-fa-base-uncased"
tokenizer = AutoTokenizer.from_pretrained(model_name)

# Tokenize the texts
train_encodings = tokenizer(train_data['text'].tolist(), truncation=True, padding=True, max_length=128)
test_encodings = tokenizer(test_data['text'].tolist(), truncation=True, padding=True, max_length=128)

# Create PyTorch datasets
class MyDataset(torch.utils.data.Dataset):
    def __init__(self, encodings, labels):
        self.encodings = encodings
        self.labels = labels

    def __getitem__(self, idx):
        item = {key: torch.tensor(val[idx]) for key, val in self.encodings.items()}
        item['labels'] = torch.tensor(self.labels[idx])
        return item

    def __len__(self):
        return len(self.labels)

train_dataset = MyDataset(train_encodings, train_data['label'].tolist())
test_dataset = MyDataset(test_encodings, test_data['label'].tolist())

# Load the ParsBERT model for sequence classification
model = AutoModelForSequenceClassification.from_pretrained(model_name, num_labels=9)

# Define training arguments
training_args = TrainingArguments(
    output_dir='./results',
    num_train_epochs=3,
    per_device_train_batch_size=8,
    per_device_eval_batch_size=8,
    warmup_steps=500,
    weight_decay=0.01,
    logging_dir='./logs',
    logging_steps=10,
    evaluation_strategy="epoch"
)

# Define compute_metrics function for evaluation
def compute_metrics(p):
    pred, labels = p
    pred = pred.argmax(axis=1)
    precision, recall, f1, _ = precision_recall_fscore_support(labels, pred, average='weighted')
    acc = accuracy_score(labels, pred)
    return {"accuracy": acc, "precision": precision, "recall": recall, "f1": f1}

# Initialize the Trainer
trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=train_dataset,
    eval_dataset=test_dataset,
    compute_metrics=compute_metrics
)

# Train the model
trainer.train()

# Evaluate the model
evaluation_results = trainer.evaluate()
print(evaluation_results)

# Save the fine-tuned model and tokenizer
model.save_pretrained("path_to_save_model")
tokenizer.save_pretrained("path_to_save_model")

# Predict on new data
new_texts = ["واقعا چندساله قرنطینه ست"]  
new_encodings = tokenizer(new_texts, truncation=True, padding=True, max_length=128, return_tensors="pt")
outputs = model(**new_encodings)
predictions = torch.argmax(outputs.logits, dim=-1)
predicted_labels = [pred.item() for pred in predictions]
print(predicted_labels)

import pandas as pd
import torch
from sklearn.model_selection import train_test_split
from transformers import AutoTokenizer, AutoModelForSequenceClassification, Trainer, TrainingArguments
from sklearn.metrics import accuracy_score, precision_recall_fscore_support

# Define preprocessing functions
def getwordid(word):
    with open("vocab.txt", "r", encoding='utf-8') as f:
        mystring = f.read()
    liststring = mystring.split()
    c = 0
    for x in liststring:
        if word == x:
            break
        c = c + 1
    return c

def isstopword(word):
    with open("stopwords.txt", "r", encoding='utf-8') as f:
        mystring = f.read()
    liststring = mystring.split()
    return word in liststring

def convertstringtotoken(input):
    retvalue = []
    sen = input.split()
    for x in sen:
        if not isstopword(x):
            retvalue.append(getwordid(x))
    return retvalue

def getlabel(input):
    labels = {
        "پرسش": 1, "ترس": 2, "تعجب": 3, "خنثی": 4,
        "خنده": 5, "خوشحالی": 6, "عصبانیت": 7, "غم": 8
    }
    return labels.get(input, 0)

# Load and preprocess your dataset
dataset_path = "dataset.tsv"  
data = pd.read_csv(dataset_path, delimiter="\t", header=None, names=["label", "text"])

# Preprocess text data
data['tokens'] = data['text'].apply(convertstringtotoken)
data['label'] = data['label'].apply(getlabel)

# Split the data into training and test sets
train_data, test_data = train_test_split(data, test_size=0.2, random_state=42, stratify=data['label'])

# Load ParsBERT tokenizer
model_name = "HooshvareLab/bert-fa-base-uncased"
tokenizer = AutoTokenizer.from_pretrained(model_name)

# Tokenize the texts
train_encodings = tokenizer(train_data['text'].tolist(), truncation=True, padding=True, max_length=128)
test_encodings = tokenizer(test_data['text'].tolist(), truncation=True, padding=True, max_length=128)

# Create PyTorch datasets
class MyDataset(torch.utils.data.Dataset):
    def __init__(self, encodings, labels):
        self.encodings = encodings
        self.labels = labels

    def __getitem__(self, idx):
        item = {key: torch.tensor(val[idx]) for key, val in self.encodings.items()}
        item['labels'] = torch.tensor(self.labels[idx])
        return item

    def __len__(self):
        return len(self.labels)

train_dataset = MyDataset(train_encodings, train_data['label'].tolist())
test_dataset = MyDataset(test_encodings, test_data['label'].tolist())

# Load the ParsBERT model for sequence classification
model = AutoModelForSequenceClassification.from_pretrained(model_name, num_labels=9)
model = model.to('cuda')  # Move model to GPU

# Define training arguments
training_args = TrainingArguments(
    output_dir='./results',
    num_train_epochs=3,
    per_device_train_batch_size=8,
    per_device_eval_batch_size=8,
    warmup_steps=500,
    weight_decay=0.01,
    logging_dir='./logs',
    logging_steps=10,
    evaluation_strategy="epoch",
    report_to='none', 
    fp16=True 
)

# Define compute_metrics function for evaluation
def compute_metrics(p):
    pred, labels = p
    pred = pred.argmax(axis=1)
    precision, recall, f1, _ = precision_recall_fscore_support(labels, pred, average='weighted')
    acc = accuracy_score(labels, pred)
    return {"accuracy": acc, "precision": precision, "recall": recall, "f1": f1}

# Initialize the Trainer
trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=train_dataset,
    eval_dataset=test_dataset,
    compute_metrics=compute_metrics
)

# Train the model
trainer.train()

# Evaluate the model
evaluation_results = trainer.evaluate()
print(evaluation_results)

# Save the fine-tuned model and tokenizer
model.save_pretrained("path_to_save_model")
tokenizer.save_pretrained("path_to_save_model")

# Predict on new data
new_texts = ["واقعا چندساله قرنطینه ست"]  
new_encodings = tokenizer(new_texts, truncation=True, padding=True, max_length=128, return_tensors="pt").to('cuda')  # Move to GPU
outputs = model(**new_encodings)
predictions = torch.argmax(outputs.logits, dim=-1)
predicted_labels = [pred.item() for pred in predictions]
print(predicted_labels)

import torch
print(torch.cuda.is_available())
